%Noah Schnitzer 
%20180514 Initial script based on dm4movie2stack by SSH
%Modified to write single precision tiffstack directly by SSH

%source_directory: path to dm4 directory which contains Hour_00 (and all
%subfolders

%prefactor:begining of file name. e.g. primatic

%bit_depth: desired bit depth of final tiff.

%max_percentile: For outlier removal, top x percentile are chopped off. Set
%to 100 for no removal

%tiff_path: path to output tiff file

%frame_averaging: number of frames (>=1) to average over-- 1 keeps all
%information

%image_scale: scale for imresize-- 1 keeps dims, >1 -> larger, <1 ->
%smaller


function writeDM4SeriesToTiff(source_dir, save_dir, dataname, image_scale)
    files = dir([source_dir,'/*/*/*/*.dm4']);
    numFiles = length(files);
    disp_counter = 10;
    
    % Read First Image to decide 
    
    tiffObj = Tiff( fullfile(save_dir, dataname), 'w8'); %w8: tag for writing BigTIFF
    % Tiff Tags
    tagstruct.Photometric = Tiff.Photometric.MinIsBlack;    %0 is black
    tagstruct.Compression = Tiff.Compression.None;           %Lossless LZW Compression
    tagstruct.BitsPerSample = bit_depth;                    %16bit
    tagstruct.SamplesPerPixel = 1;                          %BW image
    tagstruct.ImageWidth = ncsz;                              %Image size
    tagstruct.ImageLength = nrsz;                             %Image size
    tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
    tagstruct.SampleFormat = Tiff.SampleFormat.UInt;        %FLoating point
    
    for ind = 1:numFiles % First pass to find global min max
        if rem(ind,disp_counter) == 0
            fprintf('%d out of %d done\n',ind,numFiles)
        end
        if contains(files(ind).name, prefactor) && files(ind).name(1) ~= '.'  % Checking for a proper file
            img = bfopen_im([files(ind).folder,'/',files(ind).name]);
            
            
            
        end
    end 
    
    
    [nr,nc] = size(img);
    img = zeros(nr,nc);
    [nrsz,ncsz] = size(imresize(img, image_scale,'bilinear'));
    
    
   
    
    for ind = 1:numFiles % Second pass to convert data and save tiff
        count = count + 1;
        if rem(ind,disp_counter) == 0
            fprintf('%d out of %d done\n',ind,numFiles)
        end
        if count > tiff_skip_count
            img = img + bfopen_im([files(ind).folder,'/',files(ind).name]);
            if mod(frame_count,frame_averaging) == 0
                img = img/frame_averaging;
                
                img_rsz = imresize(img, image_scale,'bilinear');
                
                img_rsz = img_rsz - gl_min;
                img_rsz_uint = cast(img_rsz/gl_max*(2^bit_depth - 1),type);
                
                %write Tiff
                setTag(tiffObj,tagstruct)       %Set tag for each image
                write(tiffObj,img_rsz_uint); %Write image
                tiffObj.writeDirectory          %Move to next slice
                
                %reset img
                img = zeros(nr,nc);
            end
            frame_count = 1;
        end
    end
end



